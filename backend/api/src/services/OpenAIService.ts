import OpenAI from 'openai';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

export class OpenAIService {
  private openai: OpenAI;
  private initialized: boolean = false;

  constructor() {
    const apiKey = process.env.OPENAI_API_KEY;
    
    if (!apiKey) {
      console.warn('⚠️ OPENAI_API_KEY not found. AI features will be disabled.');
      return;
    }

    this.openai = new OpenAI({
      apiKey: apiKey,
      baseURL: process.env.OPENAI_BASE_URL
    });
    
    this.initialized = true;
    console.log('✅ OpenAI service initialized');
  }

  isReady(): boolean {
    return this.initialized;
  }

  async generateContent(request: {
    type: 'complete' | 'continue' | 'rewrite' | 'improve' | 'adapt';
    context: {
      prompt: string;
      existingContent?: string;
      brandVoiceId?: string;
      templateId?: string;
      targetLength?: number;
      targetTone?: string[];
      keywords?: string[];
    };
    options?: {
      maxTokens?: number;
      temperature?: number;
    };
  }): Promise<{ success: boolean; data?: any; error?: any }> {
    
    if (!this.initialized) {
      return {
        success: false,
        error: {
          code: 'SERVICE_NOT_INITIALIZED',
          message: 'OpenAI service is not initialized. Check API key configuration.'
        }
      };
    }

    try {
      let systemPrompt = '';
      let userPrompt = '';

      // Build prompts based on generation type
      switch (request.type) {
        case 'complete':
          systemPrompt = 'You are an expert content writer. Generate high-quality, engaging content based on the user\'s requirements.';
          userPrompt = request.context.prompt;
          break;
          
        case 'continue':
          systemPrompt = 'You are an expert content writer. Continue the existing content naturally and coherently.';
          userPrompt = `Continue this content: "${request.context.existingContent}"\n\nPrompt: ${request.context.prompt}`;
          break;
          
        case 'rewrite':
          systemPrompt = 'You are an expert content editor. Rewrite the provided content to improve clarity, engagement, and quality while maintaining the core message.';
          userPrompt = `Rewrite this content: "${request.context.existingContent}"\n\nRequirements: ${request.context.prompt}`;
          break;
          
        case 'improve':
          systemPrompt = 'You are an expert content editor. Improve the provided content by enhancing clarity, engagement, SEO, and overall quality.';
          userPrompt = `Improve this content: "${request.context.existingContent}"\n\nFocus on: ${request.context.prompt}`;
          break;
          
        case 'adapt':
          systemPrompt = 'You are an expert content adapter. Transform the content to match the specified format, tone, and requirements.';
          userPrompt = `Adapt this content: "${request.context.existingContent}"\n\nAdaptation requirements: ${request.context.prompt}`;
          break;
      }

      // Add additional context
      if (request.context.targetTone?.length) {
        systemPrompt += `\n\nTone requirements: ${request.context.targetTone.join(', ')}`;
      }
      
      if (request.context.keywords?.length) {
        systemPrompt += `\n\nKeywords to include: ${request.context.keywords.join(', ')}`;
      }
      
      if (request.context.targetLength) {
        systemPrompt += `\n\nTarget length: approximately ${request.context.targetLength} words`;
      }

      const completion = await this.openai.chat.completions.create({
        model: process.env.OPENAI_MODEL || 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: request.options?.maxTokens || 2000,
        temperature: request.options?.temperature || 0.7,
        top_p: 0.9
      });

      const generatedContent = completion.choices[0]?.message?.content;
      
      if (!generatedContent) {
        throw new Error('No content generated by OpenAI');
      }

      return {
        success: true,
        data: {
          content: generatedContent,
          usage: {
            promptTokens: completion.usage?.prompt_tokens || 0,
            completionTokens: completion.usage?.completion_tokens || 0,
            totalTokens: completion.usage?.total_tokens || 0
          },
          model: completion.model,
          finishReason: completion.choices[0]?.finish_reason
        }
      };

    } catch (error: any) {
      console.error('OpenAI API error:', error);
      return {
        success: false,
        error: {
          code: 'OPENAI_API_ERROR',
          message: error.message || 'Unknown OpenAI API error',
          details: error.response?.data || error
        }
      };
    }
  }

  async getWritingSuggestions(request: {
    content: string;
    context?: {
      contentType?: string;
      targetAudience?: string;
      purpose?: string;
    };
  }): Promise<{ success: boolean; data?: any; error?: any }> {
    
    if (!this.initialized) {
      return {
        success: false,
        error: {
          code: 'SERVICE_NOT_INITIALIZED',
          message: 'OpenAI service is not initialized. Check API key configuration.'
        }
      };
    }

    try {
      const systemPrompt = `You are an expert writing assistant. Analyze the provided content and give helpful suggestions for improvement. 
      
      Respond in JSON format with this structure:
      {
        "suggestions": [
          {
            "type": "grammar|style|clarity|engagement|seo",
            "issue": "Description of the issue",
            "suggestion": "How to improve it",
            "severity": "low|medium|high"
          }
        ],
        "overallScore": number between 1-10,
        "summary": "Brief summary of content quality"
      }`;

      const userPrompt = `Analyze this content and provide suggestions for improvement:
      
      Content: "${request.content}"
      
      ${request.context?.contentType ? `Content Type: ${request.context.contentType}` : ''}
      ${request.context?.targetAudience ? `Target Audience: ${request.context.targetAudience}` : ''}
      ${request.context?.purpose ? `Purpose: ${request.context.purpose}` : ''}`;

      const completion = await this.openai.chat.completions.create({
        model: process.env.OPENAI_MODEL || 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: 1000,
        temperature: 0.3,
        response_format: { type: "json_object" }
      });

      const responseContent = completion.choices[0]?.message?.content;
      if (!responseContent) {
        throw new Error('No response from OpenAI');
      }

      const suggestions = JSON.parse(responseContent);

      return {
        success: true,
        data: {
          ...suggestions,
          usage: {
            promptTokens: completion.usage?.prompt_tokens || 0,
            completionTokens: completion.usage?.completion_tokens || 0,
            totalTokens: completion.usage?.total_tokens || 0
          }
        }
      };

    } catch (error: any) {
      console.error('OpenAI suggestions error:', error);
      return {
        success: false,
        error: {
          code: 'OPENAI_API_ERROR',
          message: error.message || 'Failed to get writing suggestions',
          details: error.response?.data || error
        }
      };
    }
  }

  async adaptContent(request: {
    content: string;
    targetFormat: string;
    customConstraints?: Record<string, any>;
  }): Promise<{ success: boolean; data?: any; error?: any }> {
    
    if (!this.initialized) {
      return {
        success: false,
        error: {
          code: 'SERVICE_NOT_INITIALIZED',
          message: 'OpenAI service is not initialized. Check API key configuration.'
        }
      };
    }

    try {
      const systemPrompt = `You are an expert content adapter. Transform content to match specific formats and requirements while preserving the core message and value.`;
      
      const userPrompt = `Adapt this content to the specified format:
      
      Original Content: "${request.content}"
      
      Target Format: ${request.targetFormat}
      
      ${request.customConstraints ? `Additional Requirements: ${JSON.stringify(request.customConstraints)}` : ''}
      
      Please provide the adapted content that matches the target format while maintaining quality and relevance.`;

      const completion = await this.openai.chat.completions.create({
        model: process.env.OPENAI_MODEL || 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: 2000,
        temperature: 0.7
      });

      const adaptedContent = completion.choices[0]?.message?.content;
      
      if (!adaptedContent) {
        throw new Error('No adapted content generated');
      }

      return {
        success: true,
        data: {
          adaptedContent: adaptedContent,
          originalFormat: 'text',
          targetFormat: request.targetFormat,
          usage: {
            promptTokens: completion.usage?.prompt_tokens || 0,
            completionTokens: completion.usage?.completion_tokens || 0,
            totalTokens: completion.usage?.total_tokens || 0
          }
        }
      };

    } catch (error: any) {
      console.error('OpenAI adaptation error:', error);
      return {
        success: false,
        error: {
          code: 'OPENAI_API_ERROR',
          message: error.message || 'Failed to adapt content',
          details: error.response?.data || error
        }
      };
    }
  }

  getAvailableFormats() {
    return {
      success: true,
      data: {
        formats: [
          {
            id: 'blog-post',
            name: 'Blog Post',
            description: 'Standard blog post format with introduction, body, and conclusion',
            constraints: { minWords: 300, maxWords: 2000 }
          },
          {
            id: 'social-media',
            name: 'Social Media Post',
            description: 'Short, engaging social media content',
            constraints: { maxWords: 50, includeHashtags: true }
          },
          {
            id: 'email-newsletter',
            name: 'Email Newsletter',
            description: 'Email-friendly format with clear sections and call-to-action',
            constraints: { includeSubject: true, includePreheader: true }
          },
          {
            id: 'press-release',
            name: 'Press Release',
            description: 'Professional press release format',
            constraints: { includeHeadline: true, includeBoilerplate: true }
          },
          {
            id: 'product-description',
            name: 'Product Description',
            description: 'E-commerce product description with features and benefits',
            constraints: { includeBulletPoints: true, includeCTA: true }
          }
        ]
      }
    };
  }
}