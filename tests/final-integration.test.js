#!/usr/bin/env node

/**
 * Final Integration Test
 * 
 * This test verifies that the content creation fix is working correctly
 * for both manual and AI-generated content.
 */

const axios = require('axios');

// Test configuration
const API_BASE_URL = process.env.API_URL || 'http://localhost:5000';
const AI_API_BASE_URL = process.env.AI_API_URL || 'http://localhost:5003';

const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

const aiApi = axios.create({
  baseURL: AI_API_BASE_URL,
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  },
});

async function waitForService(url, maxAttempts = 10) {
  for (let i = 0; i < maxAttempts; i++) {
    try {
      await axios.get(url + '/health', { timeout: 5000 });
      return true;
    } catch (error) {
      if (i < maxAttempts - 1) {
        console.log(`  Waiting for service... (${i + 1}/${maxAttempts})`);
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
  }
  return false;
}

async function testManualContentCreation() {
  console.log('\n=== Testing Manual Content Creation ===');
  
  const timestamp = Date.now();
  const testContent = {
    title: `Manual Test Content ${timestamp}`,
    content: 'This content was created manually through the API.',
    status: 'published',
    meta_description: 'Test content for manual creation',
    tags: ['manual', 'test']
  };
  
  try {
    const response = await api.post('/api/v1/content', {
      content: testContent
    });
    
    const createdItem = response.data.data;
    
    // Validate the response structure
    if (typeof createdItem.id !== 'string') {
      console.error('‚úó ID should be string, got:', typeof createdItem.id);
      return false;
    }
    
    if (createdItem.status !== 'published') {
      console.error('‚úó Status not set correctly');
      return false;
    }
    
    if (!createdItem.published_at) {
      console.error('‚úó published_at not set for published content');
      return false;
    }
    
    if (!Array.isArray(createdItem.tags)) {
      console.error('‚úó Tags should be an array');
      return false;
    }
    
    console.log('‚úì Manual content creation successful');
    console.log(`  ID: ${createdItem.id} (${typeof createdItem.id})`);
    console.log(`  Title: ${createdItem.title}`);
    console.log(`  Status: ${createdItem.status}`);
    console.log(`  Published at: ${createdItem.published_at}`);
    console.log(`  Tags: [${createdItem.tags.join(', ')}]`);
    
    return createdItem;
  } catch (error) {
    console.error('‚úó Manual content creation failed:', error.response?.data || error.message);
    return false;
  }
}

async function testAIContentGeneration() {
  console.log('\n=== Testing AI Content Generation ===');
  
  try {
    // First, generate content using AI
    console.log('  Generating AI content...');
    const aiResponse = await aiApi.post('/api/v1/generate', {
      type: 'complete',
      input: {
        prompt: 'Write a short article about the importance of testing in software development',
        context: 'technical blog post',
        targetFormat: 'blog-post'
      },
      options: {
        targetLength: 200,
        targetTone: ['professional', 'informative']
      }
    });
    
    if (!aiResponse.data.success) {
      console.error('‚úó AI content generation failed:', aiResponse.data.error);
      return false;
    }
    
    const aiContent = aiResponse.data.data.text;
    console.log('‚úì AI content generated successfully');
    console.log(`  Content length: ${aiContent.length} characters`);
    
    // Now create content in CMS using AI-generated text
    console.log('  Creating AI content in CMS...');
    const timestamp = Date.now();
    const cmsResponse = await api.post('/api/v1/content', {
      content: {
        title: `AI Generated Content ${timestamp}`,
        content: aiContent.substring(0, 500), // Truncate for test
        status: 'draft',
        meta_description: 'This content was generated by AI',
        tags: ['ai-generated', 'test', 'automation']
      }
    });
    
    const createdItem = cmsResponse.data.data;
    
    // Validate the AI-generated content
    if (typeof createdItem.id !== 'string') {
      console.error('‚úó AI content ID should be string, got:', typeof createdItem.id);
      return false;
    }
    
    if (!Array.isArray(createdItem.tags) || !createdItem.tags.includes('ai-generated')) {
      console.error('‚úó AI content tags not set correctly');
      return false;
    }
    
    console.log('‚úì AI content creation in CMS successful');
    console.log(`  ID: ${createdItem.id} (${typeof createdItem.id})`);
    console.log(`  Title: ${createdItem.title}`);
    console.log(`  Status: ${createdItem.status}`);
    console.log(`  Tags: [${createdItem.tags.join(', ')}]`);
    
    return createdItem;
  } catch (error) {
    console.error('‚úó AI content generation failed:', error.response?.data || error.message);
    return false;
  }
}

async function testContentRetrieval() {
  console.log('\n=== Testing Content Retrieval ===');
  
  try {
    const response = await api.get('/api/v1/content');
    const contentList = response.data.data;
    
    if (!Array.isArray(contentList)) {
      console.error('‚úó Content list should be an array');
      return false;
    }
    
    // Validate each content item has correct types
    for (const item of contentList) {
      if (typeof item.id !== 'string') {
        console.error(`‚úó Content item ${item.title} has incorrect ID type:`, typeof item.id);
        return false;
      }
      
      if (!['draft', 'published', 'archived'].includes(item.status)) {
        console.error(`‚úó Content item ${item.title} has invalid status:`, item.status);
        return false;
      }
      
      if (!item.created_at || !item.updated_at) {
        console.error(`‚úó Content item ${item.title} missing timestamps`);
        return false;
      }
    }
    
    console.log('‚úì Content retrieval successful');
    console.log(`  Total content items: ${contentList.length}`);
    console.log('  All items have correct data types');
    
    return contentList;
  } catch (error) {
    console.error('‚úó Content retrieval failed:', error.response?.data || error.message);
    return false;
  }
}

async function testTypeMismatchFix() {
  console.log('\n=== Testing Type Mismatch Fix ===');
  
  try {
    // Create content and ensure all types match frontend expectations
    const timestamp = Date.now();
    const response = await api.post('/api/v1/content', {
      content: {
        title: `Type Test ${timestamp}`,
        content: 'Testing type compatibility',
        status: 'published'
      }
    });
    
    const item = response.data.data;
    
    const typeChecks = [
      { field: 'id', expected: 'string', actual: typeof item.id },
      { field: 'title', expected: 'string', actual: typeof item.title },
      { field: 'content', expected: 'string', actual: typeof item.content },
      { field: 'status', expected: 'published', actual: item.status },
      { field: 'created_at', expected: 'string', actual: typeof item.created_at },
      { field: 'updated_at', expected: 'string', actual: typeof item.updated_at },
      { field: 'tags', expected: 'array', actual: Array.isArray(item.tags) ? 'array' : typeof item.tags }
    ];
    
    let allTypesCorrect = true;
    for (const check of typeChecks) {
      if (check.expected !== check.actual) {
        console.error(`‚úó ${check.field}: expected ${check.expected}, got ${check.actual}`);
        allTypesCorrect = false;
      } else {
        console.log(`  ‚úì ${check.field}: ${check.actual}`);
      }
    }
    
    if (allTypesCorrect) {
      console.log('‚úì All data types match frontend expectations');
      console.log('‚úì Type mismatch issue has been resolved');
      return true;
    } else {
      console.error('‚úó Some data types still don\'t match frontend expectations');
      return false;
    }
    
  } catch (error) {
    console.error('‚úó Type mismatch test failed:', error.response?.data || error.message);
    return false;
  }
}

async function main() {
  console.log('üéØ Final Integration Test');
  console.log('==========================');
  console.log('Testing the complete content creation workflow\n');
  
  // Check services
  console.log('Checking services...');
  const apiReady = await waitForService(API_BASE_URL);
  if (!apiReady) {
    console.error('‚ùå Backend API is not available at', API_BASE_URL);
    process.exit(1);
  }
  console.log('‚úì Backend API is ready');
  
  const aiReady = await waitForService(AI_API_BASE_URL);
  if (!aiReady) {
    console.warn('‚ö†Ô∏è  AI service is not available at', AI_API_BASE_URL);
    console.log('   Skipping AI tests...');
  } else {
    console.log('‚úì AI service is ready');
  }
  
  // Run tests
  const results = [];
  
  // Test 1: Type Mismatch Fix
  results.push({
    name: 'Type Mismatch Fix',
    success: await testTypeMismatchFix()
  });
  
  // Test 2: Manual Content Creation
  results.push({
    name: 'Manual Content Creation',
    success: await testManualContentCreation()
  });
  
  // Test 3: AI Content Generation (if available)
  if (aiReady) {
    results.push({
      name: 'AI Content Generation',
      success: await testAIContentGeneration()
    });
  }
  
  // Test 4: Content Retrieval
  results.push({
    name: 'Content Retrieval',
    success: await testContentRetrieval()
  });
  
  // Summary
  console.log('\nüìä Final Results');
  console.log('================');
  
  const passed = results.filter(r => r.success).length;
  const total = results.length;
  
  results.forEach(result => {
    const icon = result.success ? '‚úÖ' : '‚ùå';
    console.log(`${icon} ${result.name}`);
  });
  
  console.log(`\nTotal: ${passed}/${total} tests passed`);
  
  if (passed === total) {
    console.log('\nüéâ All tests passed!');
    console.log('‚úÖ Content creation is working correctly');
    console.log('‚úÖ Type mismatches have been fixed');
    console.log('‚úÖ Both manual and AI content creation work');
    console.log('\n‚ú® The "Failed to create content" error should be resolved!');
    process.exit(0);
  } else {
    console.log('\n‚ùå Some tests failed');
    console.log('Please check the errors above');
    process.exit(1);
  }
}

if (require.main === module) {
  main().catch(error => {
    console.error('Test failed with error:', error);
    process.exit(1);
  });
}

module.exports = { main, testManualContentCreation, testAIContentGeneration };